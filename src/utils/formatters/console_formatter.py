from colorama import init, Fore, Style, Back
from typing import Dict, Any, List
import textwrap
from datetime import datetime

init()

class ConsoleFormatter:
    def format_verse(self, verse_data: Dict) -> str:
        """Format verse display with colors and structure"""
        return (
            f"\n{Fore.CYAN}üìñ Daily Verse{Style.RESET_ALL}\n"
            f"\n{Fore.GREEN}{verse_data['text']}{Style.RESET_ALL}\n"
            f"\n{Fore.YELLOW}‚Äî {verse_data['reference']} ({verse_data['translation']}){Style.RESET_ALL}\n"
        )

    def format_teaching(self, teaching_data: Dict) -> str:
        """Format biblical teaching with rich styling"""
        # Create fancy header with double borders
        header = f"""
{Fore.CYAN}‚ïî{'‚ïê' * 70}‚ïó
‚ïë {'BIBLICAL TEACHINGS'.center(68)} ‚ïë
‚ïö{'‚ïê' * 70}‚ïù{Style.RESET_ALL}"""

        # Format topic with emoji and highlighting
        topic = f"""\n{Fore.YELLOW}‚îå{'‚îÄ' * 68}‚îê
‚îÇ {Back.BLUE}{Fore.WHITE} üìö Topic: {teaching_data['topic'].upper()} {Style.RESET_ALL}{Fore.YELLOW}
‚îî{'‚îÄ' * 68}‚îò{Style.RESET_ALL}\n"""

        # Process content into sections
        content_parts = teaching_data['teaching'].split('\n\n')
        formatted_content = []
        
        for part in content_parts:
            # Format each paragraph with proper wrapping and styling
            wrapped = textwrap.fill(part.strip(), width=65)
            # Add subtle left border for content
            wrapped = '\n'.join(f"{Fore.BLUE}‚îÇ{Style.RESET_ALL} {line}" 
                              for line in wrapped.split('\n'))
            formatted_content.append(wrapped)

        # Join with decorative separators
        separator = f"\n{Fore.CYAN}‚îú{'‚îÄ' * 68}‚î§{Style.RESET_ALL}\n"
        content = separator.join(formatted_content)

        # Add styled footer
        footer = f"""
{Fore.CYAN}‚ïî{'‚ïê' * 70}‚ïó
‚ïë {f'Generated by {teaching_data["model_used"]}'.center(68)} ‚ïë
‚ïö{'‚ïê' * 70}‚ïù{Style.RESET_ALL}
"""

        return f"{header}{topic}\n{content}\n{footer}"

    def format_search_results(self, data: Dict) -> str:
        """Format complete search results with rich styling"""
        # Create fancy header
        header = f"""
{Fore.CYAN}‚ïî{'‚ïê' * 70}‚ïó
‚ïë {'BIBLICAL INSIGHTS'.center(68)} ‚ïë
‚ïö{'‚ïê' * 70}‚ïù{Style.RESET_ALL}"""

        # Format search query section
        query = f"""\n{Fore.YELLOW}‚îå{'‚îÄ' * 68}‚îê
‚îÇ {Back.BLUE}{Fore.WHITE} üîç Search: {data['query'].upper()} {Style.RESET_ALL}{Fore.YELLOW}
‚îî{'‚îÄ' * 68}‚îò{Style.RESET_ALL}\n"""

        # Format insights with proper wrapping
        insights_parts = data['insights'].split('\n\n')
        formatted_insights = []
        
        for part in insights_parts:
            wrapped = textwrap.fill(part.strip(), width=65)
            # Add left border for content
            wrapped = '\n'.join(f"{Fore.GREEN}‚îÇ{Style.RESET_ALL} {line}" 
                              for line in wrapped.split('\n'))
            formatted_insights.append(wrapped)

        # Join insights with separators
        separator = f"\n{Fore.CYAN}‚îú{'‚îÄ' * 68}‚î§{Style.RESET_ALL}\n"
        insights = separator.join(formatted_insights)

        # Format sources
        sources_header = f"\n{Fore.MAGENTA}üìö Sources:{Style.RESET_ALL}\n"
        sources = self._format_sources(data['sources'])

        # Add styled footer with timestamp
        timestamp = datetime.fromisoformat(data['timestamp']).strftime("%Y-%m-%d %H:%M:%S")
        footer = f"""
{Fore.CYAN}‚ïî{'‚ïê' * 70}‚ïó
‚ïë {f'Generated at {timestamp}'.center(68)} ‚ïë
‚ïö{'‚ïê' * 70}‚ïù{Style.RESET_ALL}
"""

        return f"{header}{query}\n{insights}\n{sources_header}{sources}\n{footer}"

    def _format_sources(self, sources: List[Dict]) -> str:
        """Format source references with enhanced styling"""
        formatted_sources = []
        for i, source in enumerate(sources, 1):
            source_text = (
                f"{Fore.YELLOW}Source {i}:{Style.RESET_ALL}\n"
                f"{Fore.CYAN}Title:{Style.RESET_ALL} {source.get('title', 'N/A')}\n"
                f"{Fore.CYAN}Link: {Style.RESET_ALL}{source.get('link', 'N/A')}\n"
                f"{Fore.CYAN}Summary:{Style.RESET_ALL} {textwrap.fill(source.get('snippet', 'N/A'), width=65)}"
            )
            formatted_sources.append(source_text)
        
        return "\n\n".join(formatted_sources)

    def format_reflection(self, reflection_data: Dict) -> str:
        """Format spiritual reflection"""
        header = self._create_header("SPIRITUAL REFLECTION")
        
        content = (
            f"{Fore.YELLOW}üí≠ Personal Application{Style.RESET_ALL}\n"
            f"{textwrap.fill(reflection_data['application'], width=70)}\n\n"
            f"{Fore.YELLOW}üôè Prayer Points{Style.RESET_ALL}\n"
            f"{textwrap.fill(reflection_data['prayer_points'], width=70)}\n\n"
            f"{Fore.YELLOW}üìñ Meditation Verses{Style.RESET_ALL}\n"
            f"{textwrap.fill(reflection_data['meditation_verses'], width=70)}"
        )
        
        footer = self._create_footer("May these insights guide your walk")
        return f"{header}\n\n{content}\n\n{footer}"

    def format_analysis(self, analysis_data: Dict) -> str:
        """Format passage analysis with rich styling"""
        header = f"""
{Fore.CYAN}‚ïî{'‚ïê' * 60}‚ïó
‚ïë{' ' * 24}PASSAGE ANALYSIS{' ' * 23}‚ïë
‚ïö{'‚ïê' * 60}‚ïù{Style.RESET_ALL}"""

        passage = f"\n{Fore.YELLOW}üìú Passage: {analysis_data['passage']}{Style.RESET_ALL}\n"
        
        content = textwrap.fill(analysis_data['analysis'], width=70)
        
        footer = f"""
{Fore.CYAN}‚ïî{'‚ïê' * 60}‚ïó
‚ïë{' ' * 15}Analyzed using {analysis_data['model_used']}{' ' * 15}‚ïë
‚ïö{'‚ïê' * 60}‚ïù{Style.RESET_ALL}"""

        return f"{header}{passage}\n{content}\n{footer}"

    def format_export_success(self, filepath: str) -> str:
        """Format export success message"""
        return f"""
{Fore.CYAN}‚ïî{'‚ïê' * 60}‚ïó
‚ïë{' ' * 26}EXPORT SUCCESS{' ' * 22}‚ïë
‚ïö{'‚ïê' * 60}‚ïù{Style.RESET_ALL}

{Fore.GREEN}‚úÖ Study session exported successfully!{Style.RESET_ALL}

{Fore.YELLOW}üìÅ Location:{Style.RESET_ALL} {filepath}

{Fore.BLUE}Open the file to view your study session in Markdown format.{Style.RESET_ALL}"""

    def format_help(self) -> str:
        """Format help message with commands and shortcuts"""
        commands = {
            'search (s)': 'Search biblical content and get analysis',
            'teach (t)': 'Get biblical teaching on a topic',
            'verse (v)': 'Get daily verse with reflection',
            'reflect (r)': 'Reflect on recent search/study',
            'export (e)': 'Export study session',
            'help (h)': 'Show this help message',
            'exit (q)': 'Exit the application'
        }
        
        header = f"""
{Fore.CYAN}‚ïî{'‚ïê' * 70}‚ïó
‚ïë {'AVAILABLE COMMANDS'.center(68)} ‚ïë
‚ïö{'‚ïê' * 70}‚ïù{Style.RESET_ALL}"""

        content = []
        for cmd, desc in commands.items():
            content.append(f"{Fore.YELLOW}{cmd:<15}{Style.RESET_ALL} - {desc}")

        return f"{header}\n\n" + "\n".join(content)

    def format_welcome(self) -> str:
        """Format welcome message with all commands"""
        commands = {
            'search (s)': 'Search biblical content and get analysis',
            'teach (t)': 'Get biblical teaching on a topic',
            'verse (v)': 'Get daily verse with reflection',
            'reflect (r)': 'Reflect on recent search/study',
            'export (e)': 'Export study session',
            'help (h)': 'Show this help message',
            'exit (q)': 'Exit the application'
        }

        header = f"""
{Fore.CYAN}‚ïî{'‚ïê' * 70}‚ïó
‚ïë {'BIBLE STUDY ASSISTANT'.center(68)} ‚ïë
‚ïö{'‚ïê' * 70}‚ïù{Style.RESET_ALL}"""

        command_list = "\n".join(
            f"{Fore.YELLOW}{cmd:<15}{Style.RESET_ALL} - {desc}"
            for cmd, desc in commands.items()
        )
        
        return f"{header}\n\nAvailable Commands:\n{command_list}"